// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 5VHeEaXV_0Al

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AuthButton from "../../AuthButton"; // plasmic-import: x4yE4ZG-E551/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import SignUpPromptDesktop from "../../SignUpPromptDesktop"; // plasmic-import: lfoX2K6g2IqZ/component

import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicAuth.module.css"; // plasmic-import: 5VHeEaXV_0Al/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jEgug0HHkt8v/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: ATgXej3HdUY2/icon
import imageFp7JxMld87Ax from "./images/image.png"; // plasmic-import: Fp7jxMLD87Ax/picture

createPlasmicElementProxy;

export type PlasmicAuth__VariantMembers = {};
export type PlasmicAuth__VariantsArgs = {};
type VariantPropType = keyof PlasmicAuth__VariantsArgs;
export const PlasmicAuth__VariantProps = new Array<VariantPropType>();

export type PlasmicAuth__ArgsType = {};
type ArgPropType = keyof PlasmicAuth__ArgsType;
export const PlasmicAuth__ArgProps = new Array<ArgPropType>();

export type PlasmicAuth__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  authButton?: Flex__<typeof AuthButton>;
  text?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  signUpPromptDesktop?: Flex__<typeof SignUpPromptDesktop>;
};

export interface DefaultAuthProps {
  className?: string;
}

const $$ = {};

function PlasmicAuth__RenderFunc(props: {
  variants: PlasmicAuth__VariantsArgs;
  args: PlasmicAuth__ArgsType;
  overrides: PlasmicAuth__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nerx4)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: imageFp7JxMld87Ax,
                fullWidth: 1125,
                fullHeight: 1316,
                aspectRatio: undefined
              }}
            />

            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__tUc3B
              )}
            >
              <Trans__>
                {
                  "\u53c2\u4e0e\u6e38\u620f\n\u6709\u673a\u4f1a\u9886\u53d6\u6700\u9ad8\nR$ 10,000\u73b0\u91d1\u5927\u5956\uff01"
                }
              </Trans__>
            </h1>
            <div className={classNames(projectcss.all, sty.freeBox__dwDkh)}>
              <AuthButton
                data-plasmic-name={"authButton"}
                data-plasmic-override={overrides.authButton}
                className={classNames("__wab_instance", sty.authButton)}
                showStartIcon={true}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <Trans__>
                    {"\u4f7f\u7528\u8c37\u6b4c\u4e00\u952e\u767b\u5f55"}
                  </Trans__>
                </div>
              </AuthButton>
            </div>
          </Stack__>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<iframe src="https://player.vimeo.com/video/1021208209?autoplay=1&muted=1&loop=1&background=1" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; min-width: 100%; min-height: 100%; object-fit: cover; filter: brightness(50%); overflow: hidden;"> </iframe>'
            }
          />

          {(
            hasVariant(globalVariants, "desktopBase", "desktopOnly")
              ? true
              : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__gvABl)}>
              <div className={classNames(projectcss.all, sty.freeBox__kxjUl)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__t114Q
                  )}
                >
                  <Trans__>
                    {
                      "\u6587\u6848\u5360\u4f4d\u7b26\n\u6682\u65f6\u8fd8\u6ca1\u60f3\u597d\n\u9884\u8ba1\u662f3\u884c"
                    }
                  </Trans__>
                </h1>
              </div>
              <SignUpPromptDesktop
                data-plasmic-name={"signUpPromptDesktop"}
                data-plasmic-override={overrides.signUpPromptDesktop}
                className={classNames(
                  "__wab_instance",
                  sty.signUpPromptDesktop
                )}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "authButton",
    "text",
    "embedHtml",
    "signUpPromptDesktop"
  ],
  img: ["img"],
  authButton: ["authButton", "text"],
  text: ["text"],
  embedHtml: ["embedHtml"],
  signUpPromptDesktop: ["signUpPromptDesktop"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  authButton: typeof AuthButton;
  text: "div";
  embedHtml: typeof Embed;
  signUpPromptDesktop: typeof SignUpPromptDesktop;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuth__VariantsArgs;
    args?: PlasmicAuth__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuth__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuth__ArgProps,
          internalVariantPropNames: PlasmicAuth__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuth";
  } else {
    func.displayName = `PlasmicAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicAuth = Object.assign(
  // Top-level PlasmicAuth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    authButton: makeNodeComponent("authButton"),
    text: makeNodeComponent("text"),
    embedHtml: makeNodeComponent("embedHtml"),
    signUpPromptDesktop: makeNodeComponent("signUpPromptDesktop"),

    // Metadata about props expected for PlasmicAuth
    internalVariantProps: PlasmicAuth__VariantProps,
    internalArgProps: PlasmicAuth__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAuth;
/* prettier-ignore-end */
