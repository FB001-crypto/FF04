// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: C3Ln22ZpqA1v

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import InfoArea from "../../InfoArea"; // plasmic-import: 6Fzwolj6rkvl/component
import FlipSelection from "../../FlipSelection"; // plasmic-import: ixjtBzCd3xbW/component
import AmountSelection from "../../AmountSelection"; // plasmic-import: 5nXKPJRaklYa/component
import OtherToolsMobile from "../../OtherToolsMobile"; // plasmic-import: HVb6eWdyYEJZ/component
import OtherToolsDesktop from "../../OtherToolsDesktop"; // plasmic-import: wvxmlV4jcUs7/component

import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicGameBody.module.css"; // plasmic-import: C3Ln22ZpqA1v/css

createPlasmicElementProxy;

export type PlasmicGameBody__VariantMembers = {};
export type PlasmicGameBody__VariantsArgs = {};
type VariantPropType = keyof PlasmicGameBody__VariantsArgs;
export const PlasmicGameBody__VariantProps = new Array<VariantPropType>();

export type PlasmicGameBody__ArgsType = {};
type ArgPropType = keyof PlasmicGameBody__ArgsType;
export const PlasmicGameBody__ArgProps = new Array<ArgPropType>();

export type PlasmicGameBody__OverridesType = {
  root?: Flex__<"div">;
  gameDivision?: Flex__<"div">;
  infoArea?: Flex__<typeof InfoArea>;
  flipSelection?: Flex__<typeof FlipSelection>;
  amountSelection?: Flex__<typeof AmountSelection>;
  otherToolsMobile?: Flex__<typeof OtherToolsMobile>;
  otherToolsDesktop?: Flex__<typeof OtherToolsDesktop>;
};

export interface DefaultGameBodyProps {
  className?: string;
}

const $$ = {};

function PlasmicGameBody__RenderFunc(props: {
  variants: PlasmicGameBody__VariantsArgs;
  args: PlasmicGameBody__ArgsType;
  overrides: PlasmicGameBody__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"gameDivision"}
        data-plasmic-override={overrides.gameDivision}
        hasGap={true}
        className={classNames(projectcss.all, sty.gameDivision)}
      >
        <InfoArea
          data-plasmic-name={"infoArea"}
          data-plasmic-override={overrides.infoArea}
          className={classNames("__wab_instance", sty.infoArea)}
        />

        <FlipSelection
          data-plasmic-name={"flipSelection"}
          data-plasmic-override={overrides.flipSelection}
          amount={["_200"]}
          className={classNames("__wab_instance", sty.flipSelection)}
          scenario={["airdrop"]}
        />

        <AmountSelection
          data-plasmic-name={"amountSelection"}
          data-plasmic-override={overrides.amountSelection}
          className={classNames("__wab_instance", sty.amountSelection)}
        />

        {(
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? false
            : true
        ) ? (
          <OtherToolsMobile
            data-plasmic-name={"otherToolsMobile"}
            data-plasmic-override={overrides.otherToolsMobile}
            className={classNames("__wab_instance", sty.otherToolsMobile)}
          />
        ) : null}
      </Stack__>
      <OtherToolsDesktop
        data-plasmic-name={"otherToolsDesktop"}
        data-plasmic-override={overrides.otherToolsDesktop}
        className={classNames("__wab_instance", sty.otherToolsDesktop)}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "gameDivision",
    "infoArea",
    "flipSelection",
    "amountSelection",
    "otherToolsMobile",
    "otherToolsDesktop"
  ],
  gameDivision: [
    "gameDivision",
    "infoArea",
    "flipSelection",
    "amountSelection",
    "otherToolsMobile"
  ],
  infoArea: ["infoArea"],
  flipSelection: ["flipSelection"],
  amountSelection: ["amountSelection"],
  otherToolsMobile: ["otherToolsMobile"],
  otherToolsDesktop: ["otherToolsDesktop"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  gameDivision: "div";
  infoArea: typeof InfoArea;
  flipSelection: typeof FlipSelection;
  amountSelection: typeof AmountSelection;
  otherToolsMobile: typeof OtherToolsMobile;
  otherToolsDesktop: typeof OtherToolsDesktop;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGameBody__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGameBody__VariantsArgs;
    args?: PlasmicGameBody__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGameBody__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGameBody__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGameBody__ArgProps,
          internalVariantPropNames: PlasmicGameBody__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGameBody__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGameBody";
  } else {
    func.displayName = `PlasmicGameBody.${nodeName}`;
  }
  return func;
}

export const PlasmicGameBody = Object.assign(
  // Top-level PlasmicGameBody renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    gameDivision: makeNodeComponent("gameDivision"),
    infoArea: makeNodeComponent("infoArea"),
    flipSelection: makeNodeComponent("flipSelection"),
    amountSelection: makeNodeComponent("amountSelection"),
    otherToolsMobile: makeNodeComponent("otherToolsMobile"),
    otherToolsDesktop: makeNodeComponent("otherToolsDesktop"),

    // Metadata about props expected for PlasmicGameBody
    internalVariantProps: PlasmicGameBody__VariantProps,
    internalArgProps: PlasmicGameBody__ArgProps
  }
);

export default PlasmicGameBody;
/* prettier-ignore-end */
