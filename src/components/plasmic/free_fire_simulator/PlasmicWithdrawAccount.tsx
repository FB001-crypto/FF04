// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: mIIGLT5R8ZWH

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AccountNumberSelection from "../../AccountNumberSelection"; // plasmic-import: N4KU6rQuEfpH/component

import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicWithdrawAccount.module.css"; // plasmic-import: mIIGLT5R8ZWH/css

createPlasmicElementProxy;

export type PlasmicWithdrawAccount__VariantMembers = {
  type: "fiat" | "crypto";
};
export type PlasmicWithdrawAccount__VariantsArgs = {
  type?: MultiChoiceArg<"fiat" | "crypto">;
};
type VariantPropType = keyof PlasmicWithdrawAccount__VariantsArgs;
export const PlasmicWithdrawAccount__VariantProps = new Array<VariantPropType>(
  "type"
);

export type PlasmicWithdrawAccount__ArgsType = {};
type ArgPropType = keyof PlasmicWithdrawAccount__ArgsType;
export const PlasmicWithdrawAccount__ArgProps = new Array<ArgPropType>();

export type PlasmicWithdrawAccount__OverridesType = {
  accountNumber?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  accountNumberSelection?: Flex__<typeof AccountNumberSelection>;
};

export interface DefaultWithdrawAccountProps {
  type?: MultiChoiceArg<"fiat" | "crypto">;
  className?: string;
}

const $$ = {};

function PlasmicWithdrawAccount__RenderFunc(props: {
  variants: PlasmicWithdrawAccount__VariantsArgs;
  args: PlasmicWithdrawAccount__ArgsType;
  overrides: PlasmicWithdrawAccount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "accountNumberSelection.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });

  return (
    <div
      data-plasmic-name={"accountNumber"}
      data-plasmic-override={overrides.accountNumber}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.accountNumber,
        { [sty.accountNumbertype_crypto]: hasVariant($state, "type", "crypto") }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pcPgF
          )}
        >
          <Trans__>
            {hasVariant(globalVariants, "desktopBase", "desktopOnly")
              ? "\u6536\u6b3e\u8d26\u6237"
              : "\u6570\u5b57\u8d27\u5e01\u94b1\u5305"}
          </Trans__>
        </div>
      </div>
      <AccountNumberSelection
        data-plasmic-name={"accountNumberSelection"}
        data-plasmic-override={overrides.accountNumberSelection}
        className={classNames("__wab_instance", sty.accountNumberSelection)}
        onChange={(...eventArgs) => {
          generateStateOnChangeProp($state, [
            "accountNumberSelection",
            "value"
          ])(eventArgs[0]);
        }}
        options={(() => {
          const __composite = [
            { value: null, label: null },
            { value: null, label: null }
          ];
          __composite["0"]["value"] = "Abcd1234";
          __composite["0"]["label"] = "Abcd1234";
          __composite["1"]["value"] = "USDT6789";
          __composite["1"]["label"] = "USDT6789";
          return __composite;
        })()}
        placeholder={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kiwi4,
              {
                [sty.texttype_crypto__kiwi4Teczg]: hasVariant(
                  $state,
                  "type",
                  "crypto"
                )
              }
            )}
          >
            <Trans__>
              {hasVariant($state, "type", "crypto")
                ? "\u5df2\u4f7f\u7528\u8fc7\u7684\u6570\u5b57\u8d27\u5e01\u94b1\u5305\u2026"
                : "\u5df2\u4f7f\u7528\u8fc7\u7684\u6536\u6b3e\u8d26\u6237\u2026"}
            </Trans__>
          </div>
        }
        value={generateStateValueProp($state, [
          "accountNumberSelection",
          "value"
        ])}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  accountNumber: ["accountNumber", "freeBox", "accountNumberSelection"],
  freeBox: ["freeBox"],
  accountNumberSelection: ["accountNumberSelection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  accountNumber: "div";
  freeBox: "div";
  accountNumberSelection: typeof AccountNumberSelection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWithdrawAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWithdrawAccount__VariantsArgs;
    args?: PlasmicWithdrawAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWithdrawAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWithdrawAccount__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWithdrawAccount__ArgProps,
          internalVariantPropNames: PlasmicWithdrawAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWithdrawAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "accountNumber") {
    func.displayName = "PlasmicWithdrawAccount";
  } else {
    func.displayName = `PlasmicWithdrawAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicWithdrawAccount = Object.assign(
  // Top-level PlasmicWithdrawAccount renders the root element
  makeNodeComponent("accountNumber"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    accountNumberSelection: makeNodeComponent("accountNumberSelection"),

    // Metadata about props expected for PlasmicWithdrawAccount
    internalVariantProps: PlasmicWithdrawAccount__VariantProps,
    internalArgProps: PlasmicWithdrawAccount__ArgProps
  }
);

export default PlasmicWithdrawAccount;
/* prettier-ignore-end */
