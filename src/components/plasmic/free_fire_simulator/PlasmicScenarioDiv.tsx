// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: UYEtztOS2wJV

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ScenarioTitle from "../../ScenarioTitle"; // plasmic-import: jAxjuzQC8iMd/component
import ScenarioInfo from "../../ScenarioInfo"; // plasmic-import: _P5d0a1oi0bS/component
import ScenarioDetails from "../../ScenarioDetails"; // plasmic-import: 0VtJeBjEt0C7/component

import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicScenarioDiv.module.css"; // plasmic-import: UYEtztOS2wJV/css

createPlasmicElementProxy;

export type PlasmicScenarioDiv__VariantMembers = {};
export type PlasmicScenarioDiv__VariantsArgs = {};
type VariantPropType = keyof PlasmicScenarioDiv__VariantsArgs;
export const PlasmicScenarioDiv__VariantProps = new Array<VariantPropType>();

export type PlasmicScenarioDiv__ArgsType = {};
type ArgPropType = keyof PlasmicScenarioDiv__ArgsType;
export const PlasmicScenarioDiv__ArgProps = new Array<ArgPropType>();

export type PlasmicScenarioDiv__OverridesType = {
  root?: Flex__<"div">;
  scenarioTitle?: Flex__<typeof ScenarioTitle>;
  scenarioInfo?: Flex__<typeof ScenarioInfo>;
  scenarioDetails?: Flex__<typeof ScenarioDetails>;
};

export interface DefaultScenarioDivProps {
  className?: string;
}

const $$ = {};

function PlasmicScenarioDiv__RenderFunc(props: {
  variants: PlasmicScenarioDiv__VariantsArgs;
  args: PlasmicScenarioDiv__ArgsType;
  overrides: PlasmicScenarioDiv__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ScenarioTitle
        data-plasmic-name={"scenarioTitle"}
        data-plasmic-override={overrides.scenarioTitle}
        className={classNames("__wab_instance", sty.scenarioTitle)}
      />

      <ScenarioInfo
        data-plasmic-name={"scenarioInfo"}
        data-plasmic-override={overrides.scenarioInfo}
        className={classNames("__wab_instance", sty.scenarioInfo)}
        differentScenario={
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? ["vehicle"]
            : undefined
        }
      />

      <ScenarioDetails
        data-plasmic-name={"scenarioDetails"}
        data-plasmic-override={overrides.scenarioDetails}
        className={classNames("__wab_instance", sty.scenarioDetails)}
        differentPics={
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? ["vehicle"]
            : ["airdrop"]
        }
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "scenarioTitle", "scenarioInfo", "scenarioDetails"],
  scenarioTitle: ["scenarioTitle"],
  scenarioInfo: ["scenarioInfo"],
  scenarioDetails: ["scenarioDetails"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  scenarioTitle: typeof ScenarioTitle;
  scenarioInfo: typeof ScenarioInfo;
  scenarioDetails: typeof ScenarioDetails;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScenarioDiv__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScenarioDiv__VariantsArgs;
    args?: PlasmicScenarioDiv__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScenarioDiv__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicScenarioDiv__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScenarioDiv__ArgProps,
          internalVariantPropNames: PlasmicScenarioDiv__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScenarioDiv__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScenarioDiv";
  } else {
    func.displayName = `PlasmicScenarioDiv.${nodeName}`;
  }
  return func;
}

export const PlasmicScenarioDiv = Object.assign(
  // Top-level PlasmicScenarioDiv renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    scenarioTitle: makeNodeComponent("scenarioTitle"),
    scenarioInfo: makeNodeComponent("scenarioInfo"),
    scenarioDetails: makeNodeComponent("scenarioDetails"),

    // Metadata about props expected for PlasmicScenarioDiv
    internalVariantProps: PlasmicScenarioDiv__VariantProps,
    internalArgProps: PlasmicScenarioDiv__ArgProps
  }
);

export default PlasmicScenarioDiv;
/* prettier-ignore-end */
