// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: Wu71ATmn97cF

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicSenarioArea.module.css"; // plasmic-import: Wu71ATmn97cF/css

createPlasmicElementProxy;

export type PlasmicSenarioArea__VariantMembers = {};
export type PlasmicSenarioArea__VariantsArgs = {};
type VariantPropType = keyof PlasmicSenarioArea__VariantsArgs;
export const PlasmicSenarioArea__VariantProps = new Array<VariantPropType>();

export type PlasmicSenarioArea__ArgsType = {};
type ArgPropType = keyof PlasmicSenarioArea__ArgsType;
export const PlasmicSenarioArea__ArgProps = new Array<ArgPropType>();

export type PlasmicSenarioArea__OverridesType = {
  senarioArea?: Flex__<"div">;
  winRate?: Flex__<"div">;
  rectangle4156?: Flex__<"div">;
  scenarioPic?: Flex__<"div">;
};

export interface DefaultSenarioAreaProps {
  className?: string;
}

const $$ = {};

function PlasmicSenarioArea__RenderFunc(props: {
  variants: PlasmicSenarioArea__VariantsArgs;
  args: PlasmicSenarioArea__ArgsType;
  overrides: PlasmicSenarioArea__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"senarioArea"}
      data-plasmic-override={overrides.senarioArea}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.senarioArea
      )}
    >
      <div
        data-plasmic-name={"winRate"}
        data-plasmic-override={overrides.winRate}
        className={classNames(projectcss.all, sty.winRate)}
      >
        <div
          data-plasmic-name={"rectangle4156"}
          data-plasmic-override={overrides.rectangle4156}
          className={classNames(projectcss.all, sty.rectangle4156)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__co2FA
            )}
          >
            <Trans__>{"Payout"}</Trans__>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t1WrP
            )}
          >
            <Trans__>{"\u00d7 1.9804"}</Trans__>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jMcxs
            )}
          >
            <Trans__>{"\u80dc\u7387"}</Trans__>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vmSp
            )}
          >
            <Trans__>{"50%"}</Trans__>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"scenarioPic"}
        data-plasmic-override={overrides.scenarioPic}
        className={classNames(projectcss.all, sty.scenarioPic)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  senarioArea: ["senarioArea", "winRate", "rectangle4156", "scenarioPic"],
  winRate: ["winRate", "rectangle4156"],
  rectangle4156: ["rectangle4156"],
  scenarioPic: ["scenarioPic"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  senarioArea: "div";
  winRate: "div";
  rectangle4156: "div";
  scenarioPic: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSenarioArea__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSenarioArea__VariantsArgs;
    args?: PlasmicSenarioArea__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSenarioArea__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSenarioArea__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSenarioArea__ArgProps,
          internalVariantPropNames: PlasmicSenarioArea__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSenarioArea__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "senarioArea") {
    func.displayName = "PlasmicSenarioArea";
  } else {
    func.displayName = `PlasmicSenarioArea.${nodeName}`;
  }
  return func;
}

export const PlasmicSenarioArea = Object.assign(
  // Top-level PlasmicSenarioArea renders the root element
  makeNodeComponent("senarioArea"),
  {
    // Helper components rendering sub-elements
    winRate: makeNodeComponent("winRate"),
    rectangle4156: makeNodeComponent("rectangle4156"),
    scenarioPic: makeNodeComponent("scenarioPic"),

    // Metadata about props expected for PlasmicSenarioArea
    internalVariantProps: PlasmicSenarioArea__VariantProps,
    internalArgProps: PlasmicSenarioArea__ArgProps
  }
);

export default PlasmicSenarioArea;
/* prettier-ignore-end */
