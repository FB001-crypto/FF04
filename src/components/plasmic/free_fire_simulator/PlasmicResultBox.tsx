// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: EmHW-l0fTCHr

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicResultBox.module.css"; // plasmic-import: EmHW-l0fTCHr/css

createPlasmicElementProxy;

export type PlasmicResultBox__VariantMembers = {
  win: "airdrop" | "vehicle" | "firstAid";
  lose: "airdrop" | "vehicle" | "firstAid";
};
export type PlasmicResultBox__VariantsArgs = {
  win?: MultiChoiceArg<"airdrop" | "vehicle" | "firstAid">;
  lose?: MultiChoiceArg<"airdrop" | "vehicle" | "firstAid">;
};
type VariantPropType = keyof PlasmicResultBox__VariantsArgs;
export const PlasmicResultBox__VariantProps = new Array<VariantPropType>(
  "win",
  "lose"
);

export type PlasmicResultBox__ArgsType = {};
type ArgPropType = keyof PlasmicResultBox__ArgsType;
export const PlasmicResultBox__ArgProps = new Array<ArgPropType>();

export type PlasmicResultBox__OverridesType = {
  _1stGame?: Flex__<"div">;
  rectangle4234?: Flex__<"div">;
  pngtreeHandPaintedCommercialGameEatChicken40297883?: Flex__<"div">;
};

export interface DefaultResultBoxProps {
  win?: MultiChoiceArg<"airdrop" | "vehicle" | "firstAid">;
  lose?: MultiChoiceArg<"airdrop" | "vehicle" | "firstAid">;
  className?: string;
}

const $$ = {};

function PlasmicResultBox__RenderFunc(props: {
  variants: PlasmicResultBox__VariantsArgs;
  args: PlasmicResultBox__ArgsType;
  overrides: PlasmicResultBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "win",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.win
      },
      {
        path: "lose",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.lose
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"_1stGame"}
      data-plasmic-override={overrides._1stGame}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty._1stGame,
        { [sty._1stGamewin_airdrop]: hasVariant($state, "win", "airdrop") }
      )}
    >
      <div
        data-plasmic-name={"rectangle4234"}
        data-plasmic-override={overrides.rectangle4234}
        className={classNames(projectcss.all, sty.rectangle4234, {
          [sty.rectangle4234lose_airdrop]: hasVariant(
            $state,
            "lose",
            "airdrop"
          ),
          [sty.rectangle4234lose_firstAid]: hasVariant(
            $state,
            "lose",
            "firstAid"
          ),
          [sty.rectangle4234lose_vehicle]: hasVariant($state, "lose", "vehicle")
        })}
      >
        <div
          data-plasmic-name={
            "pngtreeHandPaintedCommercialGameEatChicken40297883"
          }
          data-plasmic-override={
            overrides.pngtreeHandPaintedCommercialGameEatChicken40297883
          }
          className={classNames(
            projectcss.all,
            sty.pngtreeHandPaintedCommercialGameEatChicken40297883,
            {
              [sty.pngtreeHandPaintedCommercialGameEatChicken40297883lose_airdrop]:
                hasVariant($state, "lose", "airdrop"),
              [sty.pngtreeHandPaintedCommercialGameEatChicken40297883lose_firstAid]:
                hasVariant($state, "lose", "firstAid"),
              [sty.pngtreeHandPaintedCommercialGameEatChicken40297883lose_vehicle]:
                hasVariant($state, "lose", "vehicle"),
              [sty.pngtreeHandPaintedCommercialGameEatChicken40297883win_airdrop]:
                hasVariant($state, "win", "airdrop"),
              [sty.pngtreeHandPaintedCommercialGameEatChicken40297883win_firstAid]:
                hasVariant($state, "win", "firstAid"),
              [sty.pngtreeHandPaintedCommercialGameEatChicken40297883win_vehicle]:
                hasVariant($state, "win", "vehicle")
            }
          )}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  _1stGame: [
    "_1stGame",
    "rectangle4234",
    "pngtreeHandPaintedCommercialGameEatChicken40297883"
  ],
  rectangle4234: [
    "rectangle4234",
    "pngtreeHandPaintedCommercialGameEatChicken40297883"
  ],
  pngtreeHandPaintedCommercialGameEatChicken40297883: [
    "pngtreeHandPaintedCommercialGameEatChicken40297883"
  ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  _1stGame: "div";
  rectangle4234: "div";
  pngtreeHandPaintedCommercialGameEatChicken40297883: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResultBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResultBox__VariantsArgs;
    args?: PlasmicResultBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResultBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResultBox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResultBox__ArgProps,
          internalVariantPropNames: PlasmicResultBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResultBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "_1stGame") {
    func.displayName = "PlasmicResultBox";
  } else {
    func.displayName = `PlasmicResultBox.${nodeName}`;
  }
  return func;
}

export const PlasmicResultBox = Object.assign(
  // Top-level PlasmicResultBox renders the root element
  makeNodeComponent("_1stGame"),
  {
    // Helper components rendering sub-elements
    rectangle4234: makeNodeComponent("rectangle4234"),
    pngtreeHandPaintedCommercialGameEatChicken40297883: makeNodeComponent(
      "pngtreeHandPaintedCommercialGameEatChicken40297883"
    ),

    // Metadata about props expected for PlasmicResultBox
    internalVariantProps: PlasmicResultBox__VariantProps,
    internalArgProps: PlasmicResultBox__ArgProps
  }
);

export default PlasmicResultBox;
/* prettier-ignore-end */
