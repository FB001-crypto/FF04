// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 0VtJeBjEt0C7

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicScenarioDetails.module.css"; // plasmic-import: 0VtJeBjEt0C7/css

createPlasmicElementProxy;

export type PlasmicScenarioDetails__VariantMembers = {
  differentPics: "airdrop" | "vehicle" | "firstAid";
};
export type PlasmicScenarioDetails__VariantsArgs = {
  differentPics?: MultiChoiceArg<"airdrop" | "vehicle" | "firstAid">;
};
type VariantPropType = keyof PlasmicScenarioDetails__VariantsArgs;
export const PlasmicScenarioDetails__VariantProps = new Array<VariantPropType>(
  "differentPics"
);

export type PlasmicScenarioDetails__ArgsType = {};
type ArgPropType = keyof PlasmicScenarioDetails__ArgsType;
export const PlasmicScenarioDetails__ArgProps = new Array<ArgPropType>();

export type PlasmicScenarioDetails__OverridesType = {
  senarioArea?: Flex__<"div">;
  infoPanel?: Flex__<"div">;
  rectangle4156?: Flex__<"div">;
  scenarioPic?: Flex__<"div">;
};

export interface DefaultScenarioDetailsProps {
  differentPics?: MultiChoiceArg<"airdrop" | "vehicle" | "firstAid">;
  className?: string;
}

const $$ = {};

function PlasmicScenarioDetails__RenderFunc(props: {
  variants: PlasmicScenarioDetails__VariantsArgs;
  args: PlasmicScenarioDetails__ArgsType;
  overrides: PlasmicScenarioDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "differentPics",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.differentPics
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });

  return (
    <div
      data-plasmic-name={"senarioArea"}
      data-plasmic-override={overrides.senarioArea}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.senarioArea,
        {
          [sty.senarioAreadifferentPics_airdrop]: hasVariant(
            $state,
            "differentPics",
            "airdrop"
          ),
          [sty.senarioAreadifferentPics_firstAid]: hasVariant(
            $state,
            "differentPics",
            "firstAid"
          ),
          [sty.senarioAreadifferentPics_vehicle]: hasVariant(
            $state,
            "differentPics",
            "vehicle"
          ),
          [sty.senarioAreadifferentPics_vehicle_differentPics_airdrop]:
            hasVariant($state, "differentPics", "airdrop") &&
            hasVariant($state, "differentPics", "vehicle")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__pq094, {
          [sty.freeBoxdifferentPics_airdrop__pq094QYuqb]: hasVariant(
            $state,
            "differentPics",
            "airdrop"
          )
        })}
      >
        <div
          data-plasmic-name={"infoPanel"}
          data-plasmic-override={overrides.infoPanel}
          className={classNames(projectcss.all, sty.infoPanel, {
            [sty.infoPaneldifferentPics_airdrop]: hasVariant(
              $state,
              "differentPics",
              "airdrop"
            )
          })}
        >
          <div
            data-plasmic-name={"rectangle4156"}
            data-plasmic-override={overrides.rectangle4156}
            className={classNames(projectcss.all, sty.rectangle4156)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jf66M, {
              [sty.freeBoxdifferentPics_airdrop__jf66MqYuqb]: hasVariant(
                $state,
                "differentPics",
                "airdrop"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__reFf6
              )}
            >
              <Trans__>{"\u5956\u91d1\u500d\u6570"}</Trans__>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kvK6N
              )}
            >
              <Trans__>{"\u00d7 1.9804"}</Trans__>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sloB0)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dmL2I
              )}
            >
              <Trans__>{"\u80dc\u7387"}</Trans__>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___15B0Y
              )}
            >
              <Trans__>{"50%"}</Trans__>
            </div>
          </Stack__>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__dYxRp, {
          [sty.freeBoxdifferentPics_airdrop__dYxRPqYuqb]: hasVariant(
            $state,
            "differentPics",
            "airdrop"
          ),
          [sty.freeBoxdifferentPics_firstAid__dYxRPmP91]: hasVariant(
            $state,
            "differentPics",
            "firstAid"
          ),
          [sty.freeBoxdifferentPics_vehicle__dYxRPd29Si]: hasVariant(
            $state,
            "differentPics",
            "vehicle"
          )
        })}
      >
        <div
          data-plasmic-name={"scenarioPic"}
          data-plasmic-override={overrides.scenarioPic}
          className={classNames(projectcss.all, sty.scenarioPic, {
            [sty.scenarioPicdifferentPics_airdrop]: hasVariant(
              $state,
              "differentPics",
              "airdrop"
            ),
            [sty.scenarioPicdifferentPics_firstAid]: hasVariant(
              $state,
              "differentPics",
              "firstAid"
            ),
            [sty.scenarioPicdifferentPics_vehicle]: hasVariant(
              $state,
              "differentPics",
              "vehicle"
            ),
            [sty.scenarioPicdifferentPics_vehicle_differentPics_airdrop]:
              hasVariant($state, "differentPics", "airdrop") &&
              hasVariant($state, "differentPics", "vehicle")
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  senarioArea: ["senarioArea", "infoPanel", "rectangle4156", "scenarioPic"],
  infoPanel: ["infoPanel", "rectangle4156"],
  rectangle4156: ["rectangle4156"],
  scenarioPic: ["scenarioPic"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  senarioArea: "div";
  infoPanel: "div";
  rectangle4156: "div";
  scenarioPic: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScenarioDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScenarioDetails__VariantsArgs;
    args?: PlasmicScenarioDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScenarioDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicScenarioDetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScenarioDetails__ArgProps,
          internalVariantPropNames: PlasmicScenarioDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScenarioDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "senarioArea") {
    func.displayName = "PlasmicScenarioDetails";
  } else {
    func.displayName = `PlasmicScenarioDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicScenarioDetails = Object.assign(
  // Top-level PlasmicScenarioDetails renders the root element
  makeNodeComponent("senarioArea"),
  {
    // Helper components rendering sub-elements
    infoPanel: makeNodeComponent("infoPanel"),
    rectangle4156: makeNodeComponent("rectangle4156"),
    scenarioPic: makeNodeComponent("scenarioPic"),

    // Metadata about props expected for PlasmicScenarioDetails
    internalVariantProps: PlasmicScenarioDetails__VariantProps,
    internalArgProps: PlasmicScenarioDetails__ArgProps
  }
);

export default PlasmicScenarioDetails;
/* prettier-ignore-end */
