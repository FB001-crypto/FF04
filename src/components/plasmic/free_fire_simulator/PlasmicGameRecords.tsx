// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 2k4vr1-zQhkM

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import EarnOrLoss from "../../EarnOrLoss"; // plasmic-import: 1KaTQ9DhQg_b/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicGameRecords.module.css"; // plasmic-import: 2k4vr1-zQhkM/css

createPlasmicElementProxy;

export type PlasmicGameRecords__VariantMembers = {
  color: "dark" | "light";
  status: "win" | "loss";
};
export type PlasmicGameRecords__VariantsArgs = {
  color?: MultiChoiceArg<"dark" | "light">;
  status?: MultiChoiceArg<"win" | "loss">;
};
type VariantPropType = keyof PlasmicGameRecords__VariantsArgs;
export const PlasmicGameRecords__VariantProps = new Array<VariantPropType>(
  "color",
  "status"
);

export type PlasmicGameRecords__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicGameRecords__ArgsType;
export const PlasmicGameRecords__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicGameRecords__OverridesType = {
  rectangle4251?: Flex__<"div">;
  group44119?: Flex__<"div">;
  group44081?: Flex__<"div">;
  earnOrLoss?: Flex__<typeof EarnOrLoss>;
};

export interface DefaultGameRecordsProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  color?: MultiChoiceArg<"dark" | "light">;
  status?: MultiChoiceArg<"win" | "loss">;
  className?: string;
}

const $$ = {};

function PlasmicGameRecords__RenderFunc(props: {
  variants: PlasmicGameRecords__VariantsArgs;
  args: PlasmicGameRecords__ArgsType;
  overrides: PlasmicGameRecords__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "status",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.status
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"rectangle4251"}
      data-plasmic-override={overrides.rectangle4251}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.rectangle4251,
        { [sty.rectangle4251color_light]: hasVariant($state, "color", "light") }
      )}
    >
      <div
        data-plasmic-name={"group44119"}
        data-plasmic-override={overrides.group44119}
        className={classNames(projectcss.all, sty.group44119, {
          [sty.group44119color_light]: hasVariant($state, "color", "light")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: <Trans__>{"10230001"}</Trans__>,
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
        {renderPlasmicSlot({
          defaultContents: <Trans__>{"2024/10/13 01:59"}</Trans__>,
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
        <div
          data-plasmic-name={"group44081"}
          data-plasmic-override={overrides.group44081}
          className={classNames(projectcss.all, sty.group44081)}
        >
          <EarnOrLoss
            data-plasmic-name={"earnOrLoss"}
            data-plasmic-override={overrides.earnOrLoss}
            className={classNames("__wab_instance", sty.earnOrLoss, {
              [sty.earnOrLosscolor_light]: hasVariant($state, "color", "light"),
              [sty.earnOrLossstatus_loss]: hasVariant($state, "status", "loss"),
              [sty.earnOrLossstatus_win]: hasVariant($state, "status", "win")
            })}
            status={
              hasVariant($state, "status", "loss")
                ? ["loss"]
                : hasVariant($state, "status", "win")
                ? ["win"]
                : hasVariant($state, "color", "light")
                ? ["loss"]
                : ["win"]
            }
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rectangle4251: ["rectangle4251", "group44119", "group44081", "earnOrLoss"],
  group44119: ["group44119", "group44081", "earnOrLoss"],
  group44081: ["group44081", "earnOrLoss"],
  earnOrLoss: ["earnOrLoss"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rectangle4251: "div";
  group44119: "div";
  group44081: "div";
  earnOrLoss: typeof EarnOrLoss;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGameRecords__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGameRecords__VariantsArgs;
    args?: PlasmicGameRecords__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGameRecords__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGameRecords__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGameRecords__ArgProps,
          internalVariantPropNames: PlasmicGameRecords__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGameRecords__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rectangle4251") {
    func.displayName = "PlasmicGameRecords";
  } else {
    func.displayName = `PlasmicGameRecords.${nodeName}`;
  }
  return func;
}

export const PlasmicGameRecords = Object.assign(
  // Top-level PlasmicGameRecords renders the root element
  makeNodeComponent("rectangle4251"),
  {
    // Helper components rendering sub-elements
    group44119: makeNodeComponent("group44119"),
    group44081: makeNodeComponent("group44081"),
    earnOrLoss: makeNodeComponent("earnOrLoss"),

    // Metadata about props expected for PlasmicGameRecords
    internalVariantProps: PlasmicGameRecords__VariantProps,
    internalArgProps: PlasmicGameRecords__ArgProps
  }
);

export default PlasmicGameRecords;
/* prettier-ignore-end */
